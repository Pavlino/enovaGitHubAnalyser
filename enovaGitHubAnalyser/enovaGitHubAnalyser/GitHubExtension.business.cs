
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using enovaGitHubAnalyser.GitHubExtension;

[assembly: ModuleType("GitHubExtension", typeof(enovaGitHubAnalyser.GitHubExtension.GitHubExtensionModule), 4, "GitHubExtension", 1, VersionNumber=1)]

namespace enovaGitHubAnalyser.GitHubExtension {

	/// <summary>
	/// Moduł GitHubExtension.
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class GitHubExtensionModule : Module {

		public static GitHubExtensionModule GetInstance(ISessionable session) => (GitHubExtensionModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new GitHubExtensionModule(session)) {
		};

		GitHubExtensionModule(Session session) : base(session) {}

		private static Soneta.Business.App.TableInfo tableInfoCommity = new Soneta.Business.App.TableInfo.Create<Commity, Commit, CommitRecord>("Commit") {
		};

		public Commity Commity => (Commity)Session.Tables[tableInfoCommity];

		private static Soneta.Business.App.KeyInfo keyInfoCommitWgSHA = new Soneta.Business.App.KeyInfo(tableInfoCommity, table => new CommitTable.WgSHAKey(table)) {
			Name = "WgSHA",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"SHA"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Commit.
		/// Dziedzicząca klasa <see cref="Commity"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Commity"/>
		/// <seealso cref="CommitRow"/>
		/// <seealso cref="Commit"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela z commitami")]
		public abstract partial class CommitTable : GuidedTable {

			protected CommitTable() {}

			public class WgSHAKey : Key<Commit> {
				internal WgSHAKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((CommitRecord)rec).SHA.TrimEnd()
				};

				public Commit this[string sha] => (Commit)Find(sha);
			}

			public WgSHAKey WgSHA => (WgSHAKey)Session.Keys[keyInfoCommitWgSHA];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="GitHubExtensionModule"/>
			public new GitHubExtensionModule Module => (GitHubExtensionModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Commit"/>
			public new Commit this[int id] => (Commit)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Commit"/>
			public new Commit[] this[int[] ids] => (Commit[])base[ids];

			public new Commit this[Guid guid] => (Commit)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Commit();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("SHA");
				names.Append(divider); names.Append("Autor");
				names.Append(divider); names.Append("Data");
			}

		}

		public abstract partial class CommitRow : GuidedRow {

			private CommitRecord record;

			protected override void AssignRecord(Record rec) {
				record = (CommitRecord)rec;
			}

			protected CommitRow() : base(true) {
			}

			[MaxLength(255)]
			[Required]
			public string SHA {
				get {
					if (record==null) GetRecord();
					return record.SHA;
				}
				set {
					CommitSchema.SHABeforeEdit?.Invoke((Commit)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "SHA");
					if (value.Length>SHALength) throw new ValueToLongException(this, "SHA", SHALength);
					GetEdit(record==null, false);
					record.SHA = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoCommitWgSHA);
					}
					CommitSchema.SHAAfterEdit?.Invoke((Commit)this);
				}
			}

			public const int SHALength = 255;

			[MaxLength(100)]
			public string Autor {
				get {
					if (record==null) GetRecord();
					return record.Autor;
				}
				set {
					CommitSchema.AutorBeforeEdit?.Invoke((Commit)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>AutorLength) throw new ValueToLongException(this, "Autor", AutorLength);
					GetEdit(record==null, false);
					record.Autor = value;
					CommitSchema.AutorAfterEdit?.Invoke((Commit)this);
				}
			}

			public const int AutorLength = 100;

			public Date Data {
				get {
					if (record==null) GetRecord();
					return record.Data;
				}
				set {
					CommitSchema.DataBeforeEdit?.Invoke((Commit)this, ref value);
					GetEdit(record==null, false);
					record.Data = value;
					CommitSchema.DataAfterEdit?.Invoke((Commit)this);
				}
			}

			[Browsable(false)]
			public new Commity Table => (Commity)base.Table;

			[Browsable(false)]
			public GitHubExtensionModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoCommity;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				CommitSchema.OnCalcObjectRight?.Invoke((Commit)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				CommitSchema.OnCalcParentsObjectRight?.Invoke((Commit)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				CommitSchema.OnCalcReadOnly?.Invoke((Commit)this, ref result);
				return result;
			}

			class SHARequiredVerifier : RequiredVerifier {
				internal SHARequiredVerifier(IRow row) : base(row, "SHA") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((CommitRow)Row).SHA));
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new SHARequiredVerifier(this));
				CommitSchema.OnAdded?.Invoke((Commit)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				CommitSchema.OnLoaded?.Invoke((Commit)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				CommitSchema.OnEditing?.Invoke((Commit)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				CommitSchema.OnDeleting?.Invoke((Commit)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				CommitSchema.OnDeleted?.Invoke((Commit)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				CommitSchema.OnRepacked?.Invoke((Commit)this);
			}

		}

		public sealed class CommitRecord : GuidedRecord {
			[Required]
			[MaxLength(255)]
			public string SHA = "";
			[MaxLength(100)]
			public string Autor = "";
			public Date Data;

			public override Record Clone() {
				CommitRecord rec = (CommitRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				SHA = creator.Read_string();
				Autor = creator.Read_string();
				Data = creator.Read_date();
			}
		}

		public static class CommitSchema {

			internal static RowDelegate<CommitRow, string> SHABeforeEdit;
			public static void AddSHABeforeEdit(RowDelegate<CommitRow, string> value)
				=> SHABeforeEdit = (RowDelegate<CommitRow, string>)Delegate.Combine(SHABeforeEdit, value);

			internal static RowDelegate<CommitRow> SHAAfterEdit;
			public static void AddSHAAfterEdit(RowDelegate<CommitRow> value)
				=> SHAAfterEdit = (RowDelegate<CommitRow>)Delegate.Combine(SHAAfterEdit, value);

			internal static RowDelegate<CommitRow, string> AutorBeforeEdit;
			public static void AddAutorBeforeEdit(RowDelegate<CommitRow, string> value)
				=> AutorBeforeEdit = (RowDelegate<CommitRow, string>)Delegate.Combine(AutorBeforeEdit, value);

			internal static RowDelegate<CommitRow> AutorAfterEdit;
			public static void AddAutorAfterEdit(RowDelegate<CommitRow> value)
				=> AutorAfterEdit = (RowDelegate<CommitRow>)Delegate.Combine(AutorAfterEdit, value);

			internal static RowDelegate<CommitRow, Date> DataBeforeEdit;
			public static void AddDataBeforeEdit(RowDelegate<CommitRow, Date> value)
				=> DataBeforeEdit = (RowDelegate<CommitRow, Date>)Delegate.Combine(DataBeforeEdit, value);

			internal static RowDelegate<CommitRow> DataAfterEdit;
			public static void AddDataAfterEdit(RowDelegate<CommitRow> value)
				=> DataAfterEdit = (RowDelegate<CommitRow>)Delegate.Combine(DataAfterEdit, value);

			internal static RowDelegate<CommitRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<CommitRow> value)
				=> OnLoaded = (RowDelegate<CommitRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<CommitRow> OnAdded;
			public static void AddOnAdded(RowDelegate<CommitRow> value)
				=> OnAdded = (RowDelegate<CommitRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<CommitRow> OnEditing;
			public static void AddOnEditing(RowDelegate<CommitRow> value)
				=> OnEditing = (RowDelegate<CommitRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<CommitRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<CommitRow> value)
				=> OnDeleting = (RowDelegate<CommitRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<CommitRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<CommitRow> value)
				=> OnDeleted = (RowDelegate<CommitRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<CommitRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<CommitRow> value)
				=> OnRepacked = (RowDelegate<CommitRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<CommitRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<CommitRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<CommitRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<CommitRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<CommitRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<CommitRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<CommitRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<CommitRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<CommitRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsGitHubExtensionModule {
		public static GitHubExtensionModule GetGitHubExtension(this Session session) => GitHubExtensionModule.GetInstance(session);
	}

}


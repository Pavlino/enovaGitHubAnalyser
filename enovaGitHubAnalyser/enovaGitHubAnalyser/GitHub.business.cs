
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using enovaGitHubAnalyser;

[assembly: ModuleType("GitHub", typeof(enovaGitHubAnalyser.GitHubModule), 4, "GitHub", 1, VersionNumber=1)]

namespace enovaGitHubAnalyser {

	/// <summary>
	/// Moduł GitHub.
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class GitHubModule : Module {

		public static GitHubModule GetInstance(ISessionable session) => (GitHubModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new GitHubModule(session)) {
		};

		GitHubModule(Session session) : base(session) {}

		private static Soneta.Business.App.TableInfo tableInfoCommits = new Soneta.Business.App.TableInfo.Create<Commits, GitHubCommit, GitHubCommitRecord>("GitHubCo") {
		};

		public Commits Commits => (Commits)Session.Tables[tableInfoCommits];

		private static Soneta.Business.App.KeyInfo keyInfoGitHubCommitIdentyfikator = new Soneta.Business.App.KeyInfo(tableInfoCommits, table => new GitHubCommitTable.IdentyfikatorKey(table)) {
			Name = "Identyfikator",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Id"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów GitHubCommit.
		/// Dziedzicząca klasa <see cref="Commits"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Commits"/>
		/// <seealso cref="GitHubCommitRow"/>
		/// <seealso cref="GitHubCommit"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela z dodanymi comitty'ami")]
		public abstract partial class GitHubCommitTable : GuidedTable {

			protected GitHubCommitTable() {}

			public class IdentyfikatorKey : Key<GitHubCommit> {
				internal IdentyfikatorKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((GitHubCommitRecord)rec).Id
				};

				public GitHubCommit this[int id] => (GitHubCommit)Find(id);
			}

			public IdentyfikatorKey Identyfikator => (IdentyfikatorKey)Session.Keys[keyInfoGitHubCommitIdentyfikator];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="GitHubModule"/>
			public new GitHubModule Module => (GitHubModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="GitHubCommit"/>
			public new GitHubCommit this[int id] => (GitHubCommit)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="GitHubCommit"/>
			public new GitHubCommit[] this[int[] ids] => (GitHubCommit[])base[ids];

			public new GitHubCommit this[Guid guid] => (GitHubCommit)base[guid];

			protected override Row CreateRow(RowCreator creator) => new GitHubCommit();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Id");
				names.Append(divider); names.Append("Autor");
				names.Append(divider); names.Append("Data");
				names.Append(divider); names.Append("Branch");
			}

		}

		public abstract partial class GitHubCommitRow : GuidedRow {

			private GitHubCommitRecord record;

			protected override void AssignRecord(Record rec) {
				record = (GitHubCommitRecord)rec;
			}

			protected GitHubCommitRow() : base(true) {
			}

			[Required]
			public int Id {
				get {
					if (record==null) GetRecord();
					return record.Id;
				}
				set {
					GitHubCommitSchema.IdBeforeEdit?.Invoke((GitHubCommit)this, ref value);
					if (value==0) throw new RequiredException(this, "Id");
					GetEdit(record==null, false);
					record.Id = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoGitHubCommitIdentyfikator);
					}
					GitHubCommitSchema.IdAfterEdit?.Invoke((GitHubCommit)this);
				}
			}

			[MaxLength(100)]
			public string Autor {
				get {
					if (record==null) GetRecord();
					return record.Autor;
				}
				set {
					GitHubCommitSchema.AutorBeforeEdit?.Invoke((GitHubCommit)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>AutorLength) throw new ValueToLongException(this, "Autor", AutorLength);
					GetEdit(record==null, false);
					record.Autor = value;
					GitHubCommitSchema.AutorAfterEdit?.Invoke((GitHubCommit)this);
				}
			}

			public const int AutorLength = 100;

			public Date Data {
				get {
					if (record==null) GetRecord();
					return record.Data;
				}
				set {
					GitHubCommitSchema.DataBeforeEdit?.Invoke((GitHubCommit)this, ref value);
					GetEdit(record==null, false);
					record.Data = value;
					GitHubCommitSchema.DataAfterEdit?.Invoke((GitHubCommit)this);
				}
			}

			[MaxLength(100)]
			public string Branch {
				get {
					if (record==null) GetRecord();
					return record.Branch;
				}
				set {
					GitHubCommitSchema.BranchBeforeEdit?.Invoke((GitHubCommit)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>BranchLength) throw new ValueToLongException(this, "Branch", BranchLength);
					GetEdit(record==null, false);
					record.Branch = value;
					GitHubCommitSchema.BranchAfterEdit?.Invoke((GitHubCommit)this);
				}
			}

			public const int BranchLength = 100;

			[Browsable(false)]
			public new Commits Table => (Commits)base.Table;

			[Browsable(false)]
			public GitHubModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoCommits;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				GitHubCommitSchema.OnCalcObjectRight?.Invoke((GitHubCommit)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				GitHubCommitSchema.OnCalcParentsObjectRight?.Invoke((GitHubCommit)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				GitHubCommitSchema.OnCalcReadOnly?.Invoke((GitHubCommit)this, ref result);
				return result;
			}

			class IdRequiredVerifier : RequiredVerifier {
				internal IdRequiredVerifier(IRow row) : base(row, "Id") {
				}
				protected override bool IsValid() => !(((GitHubCommitRow)Row).Id==0);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new IdRequiredVerifier(this));
				GitHubCommitSchema.OnAdded?.Invoke((GitHubCommit)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				GitHubCommitSchema.OnLoaded?.Invoke((GitHubCommit)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				GitHubCommitSchema.OnEditing?.Invoke((GitHubCommit)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				GitHubCommitSchema.OnDeleting?.Invoke((GitHubCommit)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				GitHubCommitSchema.OnDeleted?.Invoke((GitHubCommit)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				GitHubCommitSchema.OnRepacked?.Invoke((GitHubCommit)this);
			}

		}

		public sealed class GitHubCommitRecord : GuidedRecord {
			[Required]
			public int Id;
			[MaxLength(100)]
			public string Autor = "";
			public Date Data;
			[MaxLength(100)]
			public string Branch = "";

			public override Record Clone() {
				GitHubCommitRecord rec = (GitHubCommitRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Id = creator.Read_int();
				Autor = creator.Read_string();
				Data = creator.Read_date();
				Branch = creator.Read_string();
			}
		}

		public static class GitHubCommitSchema {

			internal static RowDelegate<GitHubCommitRow, int> IdBeforeEdit;
			public static void AddIdBeforeEdit(RowDelegate<GitHubCommitRow, int> value)
				=> IdBeforeEdit = (RowDelegate<GitHubCommitRow, int>)Delegate.Combine(IdBeforeEdit, value);

			internal static RowDelegate<GitHubCommitRow> IdAfterEdit;
			public static void AddIdAfterEdit(RowDelegate<GitHubCommitRow> value)
				=> IdAfterEdit = (RowDelegate<GitHubCommitRow>)Delegate.Combine(IdAfterEdit, value);

			internal static RowDelegate<GitHubCommitRow, string> AutorBeforeEdit;
			public static void AddAutorBeforeEdit(RowDelegate<GitHubCommitRow, string> value)
				=> AutorBeforeEdit = (RowDelegate<GitHubCommitRow, string>)Delegate.Combine(AutorBeforeEdit, value);

			internal static RowDelegate<GitHubCommitRow> AutorAfterEdit;
			public static void AddAutorAfterEdit(RowDelegate<GitHubCommitRow> value)
				=> AutorAfterEdit = (RowDelegate<GitHubCommitRow>)Delegate.Combine(AutorAfterEdit, value);

			internal static RowDelegate<GitHubCommitRow, Date> DataBeforeEdit;
			public static void AddDataBeforeEdit(RowDelegate<GitHubCommitRow, Date> value)
				=> DataBeforeEdit = (RowDelegate<GitHubCommitRow, Date>)Delegate.Combine(DataBeforeEdit, value);

			internal static RowDelegate<GitHubCommitRow> DataAfterEdit;
			public static void AddDataAfterEdit(RowDelegate<GitHubCommitRow> value)
				=> DataAfterEdit = (RowDelegate<GitHubCommitRow>)Delegate.Combine(DataAfterEdit, value);

			internal static RowDelegate<GitHubCommitRow, string> BranchBeforeEdit;
			public static void AddBranchBeforeEdit(RowDelegate<GitHubCommitRow, string> value)
				=> BranchBeforeEdit = (RowDelegate<GitHubCommitRow, string>)Delegate.Combine(BranchBeforeEdit, value);

			internal static RowDelegate<GitHubCommitRow> BranchAfterEdit;
			public static void AddBranchAfterEdit(RowDelegate<GitHubCommitRow> value)
				=> BranchAfterEdit = (RowDelegate<GitHubCommitRow>)Delegate.Combine(BranchAfterEdit, value);

			internal static RowDelegate<GitHubCommitRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<GitHubCommitRow> value)
				=> OnLoaded = (RowDelegate<GitHubCommitRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<GitHubCommitRow> OnAdded;
			public static void AddOnAdded(RowDelegate<GitHubCommitRow> value)
				=> OnAdded = (RowDelegate<GitHubCommitRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<GitHubCommitRow> OnEditing;
			public static void AddOnEditing(RowDelegate<GitHubCommitRow> value)
				=> OnEditing = (RowDelegate<GitHubCommitRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<GitHubCommitRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<GitHubCommitRow> value)
				=> OnDeleting = (RowDelegate<GitHubCommitRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<GitHubCommitRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<GitHubCommitRow> value)
				=> OnDeleted = (RowDelegate<GitHubCommitRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<GitHubCommitRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<GitHubCommitRow> value)
				=> OnRepacked = (RowDelegate<GitHubCommitRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<GitHubCommitRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<GitHubCommitRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<GitHubCommitRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<GitHubCommitRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<GitHubCommitRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<GitHubCommitRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<GitHubCommitRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<GitHubCommitRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<GitHubCommitRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsGitHubModule {
		public static GitHubModule GetGitHub(this Session session) => GitHubModule.GetInstance(session);
	}

}

